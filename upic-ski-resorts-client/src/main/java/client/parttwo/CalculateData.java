package client.parttwo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.OptionalInt;

/*
  This class parttwo.CalculateData is specifically designed for the csv file generated by class parttwo.CreateCSVRecord,
  whose data is provided by partone.SendRequest.
 */
public class CalculateData {

  private String filePath;

  private List<Integer> resTimeList;

  public CalculateData(String filePath) {
    this.filePath = filePath;
    this.resTimeList = this.processFile(filePath);
  }

  private List<Integer> processFile(String filePath) {
    List<Integer> resTimeList = new ArrayList<>();

    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))){
      String line;
      while((line = reader.readLine()) != null){
        String[] values = line.split(",");
        if(values[2].matches("-?\\d+")) {
          resTimeList.add(Integer.parseInt(values[2]));
        }
      }

    } catch (IOException e) {
      System.out.println(e.getMessage());
    }

    return resTimeList;
  }

  public Double getMean() {
    return this.resTimeList.stream().mapToInt(Integer::intValue).
        average().orElseThrow(() -> new IllegalArgumentException("Mean calculation failed"));
  }

  public Double getMedian() {
    ArrayList<Integer> sortedList = new ArrayList<>(this.resTimeList);
    Collections.sort(sortedList);
    int size = sortedList.size();
    if(size % 2 == 0) {
      int middle = size / 2;
      return (sortedList.get(middle - 1) + sortedList.get(middle)) / 2.0;
    } else {
      return (double) sortedList.get(size / 2);
    }
  }

  public Integer getP99() {
    ArrayList<Integer> sortedList = new ArrayList<>(this.resTimeList);
    Collections.sort(sortedList);
    int p99 = (int) ((sortedList.size() - 1) * 0.99);
    return sortedList.get(p99);
  }

  public Integer getMin() {
    OptionalInt opMin = this.resTimeList.stream().mapToInt(Integer::intValue).min();
    return opMin.orElse(Integer.MIN_VALUE);
  }

  public Integer getMax() {
    OptionalInt opMax = this.resTimeList.stream().mapToInt(Integer::intValue).max();
    return opMax.orElse(Integer.MAX_VALUE);
  }
}
